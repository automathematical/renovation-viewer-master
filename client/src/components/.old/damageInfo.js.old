import React, { Component } from "react";
import PropTypes from "prop-types";
import { connect } from "react-redux";
import { getProject } from "../../../redux/actions/projectActions";
import { Container, CardText } from "reactstrap";

import Annotation from "react-image-annotation";

class DamageInfo extends Component {
  static propTypes = {
    getProject: PropTypes.func.isRequired,
    project: PropTypes.object,
  };

  state = {
    annotations: [],
    annotation: {},
  };

  componentDidMount() {
    this.props.getProject();
  }

  convertToImage(buffer) {
    if (
      buffer !== undefined &&
      buffer.data !== undefined &&
      buffer.data !== ""
    ) {
      var base64Flag = "data:image/jpeg;base64,";
      var imageStr = this.arrayBufferToBase64(buffer.data);
      return base64Flag + imageStr;
    }
    return "";
  }

  arrayBufferToBase64(buffer) {
    var binary = "";
    var bytes = [].slice.call(new Uint8Array(buffer));
    bytes.forEach((b) => (binary += String.fromCharCode(b)));
    return window.btoa(binary);
  }

  onChange = (annotation) => {
    this.setState({ annotation });
  };

  onSubmit = (annotation) => {
    const { geometry, data } = annotation;

    this.setState({
      annotation: {},
      annotations: this.state.annotations.concat({
        geometry,
        data: {
          ...data,
          id: Math.random(),
        },
      }),
    });
  };

  render() {
    const { projects } = this.props.project;
    return (
      <div>
        {projects.map(({ image }) => (
          <Container style={{ width: "40%" }}>
            <CardText>Annotation</CardText>
            <Annotation
              src={this.convertToImage(image)}
              alt=""
              annotations={this.state.annotations}
              type={this.state.type}
              value={this.state.annotation}
              onChange={this.onChange}
              onSubmit={this.onSubmit}
              allowTouch
            />
          </Container>
        ))}
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  project: state.project,
});

export default connect(mapStateToProps, { getProject })(DamageInfo);
